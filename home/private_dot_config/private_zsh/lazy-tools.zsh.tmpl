# Lazy load zoxide
_init_zoxide() {
    if command -v zoxide > /dev/null; then
        eval "$(zoxide init zsh)"
    fi

    # Remove wrappers to prevent infinite recursion
    unset -f z zi _init_zoxide
}
z() { _init_zoxide; z "$@"; }
zi() { _init_zoxide; zi "$@"; }

# Lazy load tenv completion
tenv() {
    unset -f tenv
    if [ -f "${XDG_CONFIG_HOME}/tenv/completion.zsh" ]; then
        source "${XDG_CONFIG_HOME}/tenv/completion.zsh"
    fi
    tenv "$@"
}


# Initialize atuin (provides shell integration)
if command -v atuin > /dev/null; then
    eval "$(atuin init zsh)"
fi

# Initialize fzf (provides shell integration)
if command -v fzf > /dev/null; then
    # Use fd if available (respects .gitignore by default)
    if command -v fd > /dev/null; then
        export FZF_DEFAULT_COMMAND='fd --type f'
        export FZF_CTRL_T_COMMAND='fd --type f'
        export FZF_ALT_C_COMMAND='fd --type d'
    fi
    
    source <(fzf --zsh)
fi

# Lazy load 1Password CLI
op() {
    unset -f op
    if type "op" > /dev/null; then
        eval "$(op completion zsh)"; compdef _op op
        source "${XDG_CONFIG_HOME}/op/plugins.sh"
        op "$@"
    fi
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$XDG_DATA_HOME/google-cloud-sdk/path.zsh.inc" ]; then
    source "$XDG_DATA_HOME/google-cloud-sdk/path.zsh.inc"
fi

# Lazy load gcloud completion
gcloud() {
    unset -f gcloud
    if [ -f "$XDG_DATA_HOME/google-cloud-sdk/completion.zsh.inc" ]; then
        source "$XDG_DATA_HOME/google-cloud-sdk/completion.zsh.inc"
    fi
    gcloud "$@"
}

# Lazy load uv completion
uv() {
    unset -f uv
    if command -v uv &>/dev/null; then
        eval "$(uv generate-shell-completion zsh)"
        uv "$@"
    fi
}

# Lazy load uvx completion
uvx() {
    unset -f uvx
    if command -v uvx &>/dev/null; then
        eval "$(uvx --generate-shell-completion zsh)"
        uvx "$@"
    fi
}

# Lazy load chezmoi completion
chezmoi() {
    unset -f chezmoi
    if command -v chezmoi &>/dev/null; then
        eval "$(chezmoi completion zsh)"
        chezmoi "$@"
    fi
}

# Load ZSH plugins
_zsh_plugins=(
    "$XDG_DATA_HOME/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
    "$XDG_DATA_HOME/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"  # Must be last
)

# Load plugins in order
for plugin in "${_zsh_plugins[@]}"; do
    [ -f "$plugin" ] && source "$plugin"
done
unset _zsh_plugins plugin
